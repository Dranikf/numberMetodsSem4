% function create interpolation Lagrange Poly by Eitken schehme
% xVec , y - data vectors
% a - if true then show temp calculation process in command window
% polyn - result as a symbolic expression 

function  polyn = eitkenScheme(xVec , y , a)

	% –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –ø–æ–ª–∏–Ω–æ–º—ã —Ä–∞—?–ø–∏—Ö–∞–µ–º –≤ –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—?—?–∏–≤
	% P i,i+1,i+2, ... , n-1 , n - –≤ –º–∞—?—?–∏–≤–µ –æ—Ç –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∏–Ω–¥–µ–∫—? (i, n) - (–ø–µ—Ä–≤—ã–π –∏ –ø–æ—?–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—?—ã)
	

	syms x;

	% —Ç—É—Ç —Ü–∏–∫–ª –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —?—Ç–∞—Ä—à–∏–µ –∏–Ω–¥–µ–∫—?—ã
	% –ø–æ–∫–∏–Ω–µ–º –µ–≥–æ –∫–æ–≥–¥–∞ –¥–æ—?—Ç–∏–≥–Ω–µ–º –Ω—É–∂–Ω–æ–π
	% —Ç–æ—á–Ω–æ—?—Ç–∏ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∞—Ç—å—?—? –∑–Ω–∞—á–µ–Ω–∏—?
    for iter1 = 1:numel(xVec) 
		% —Ç—É—Ç –ø–µ—Ä–µ–±–µ—Ä–µ–º –º–ª–∞–¥—à–∏–µ –∏–Ω–¥–µ–∫—?—ã
		for iter2 = iter1:-1:1
			% —?—Ç–æ –¥–ª—? —Ç–µ—Ö —?–ª–µ–º–µ–Ω—Ç–æ–≤ —? –æ–¥–Ω–∏–º –∏–Ω–¥–µ–∫—?–æ–º, –≤ –º–æ–µ–π –∏–Ω—Ç–µ–ø—Ä–µ—Ç–∞—Ü–∏–∏ –ø–æ–ª—É—á–∞–µ—Ç—?—?, —á—Ç–æ —É –Ω–∏—Ö —?—Ç–∞—Ä—à–∏–π 
			% –∏ –º–ª–∞–¥—à–∏–π –∏–Ω–¥–µ–∫—?—ã —?–æ–≤–ø–∞–¥–∞—é—Ç
            
			if iter2 == iter1 
				P(iter2, iter1) = sym(y(iter1));
            else
                P(iter2 , iter1) = (((x - xVec(iter2))*P(iter2+1, iter1)) - ((x - xVec(iter1))*P(iter2 , iter1 - 1)))/(xVec(iter1) - xVec(iter2));
            end
			
			if(a == true)
				disp(['P(' , num2str(iter1) , ',' , num2str(iter2) , ') value is']);
				P	
			end
		end
    end
    
    polyn =  P(1 , numel(xVec));
end
